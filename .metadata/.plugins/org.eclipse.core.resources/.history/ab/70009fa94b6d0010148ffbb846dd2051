package in.cfn.main.dao;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;
import in.cfn.main.entity.User;

@Repository
public class UserDao {

	@Autowired
	private JdbcTemplate jdbcTemplate;

//	JdbcTemplate provide method to interact with database.

//	INSERT METHOD
	public boolean insertUser(User user) {

		boolean status = false;

		try {

			String INSERT_SQL_QUERY = "INSERT INTO users(name, email, gender, city) VALUES (?,?,?,?)";

//			To INSERT,UPDATE,DELETE we use 'update' method.
			int count = jdbcTemplate.update(INSERT_SQL_QUERY, user.getName(), user.getEmail(), user.getGender(),
					user.getCity());

			if (count > 0) {
				status = true;
			} else {
				status = false;
			}

		} catch (Exception e) {
			status = false;
			e.printStackTrace();
		}

		return status;

	}

//	UPDATE METHOD
	public boolean updateUser(User user) {
		boolean status = false;
		try {

			String UPDATE_SQL_QUERY = "UPDATE users SET name=?, gender=?, city=? WHERE email=?";

			int count = jdbcTemplate.update(UPDATE_SQL_QUERY, user.getName(), user.getGender(), user.getCity(),
					user.getEmail());

			if (count > 0) {
				status=true;
			}else {
				status=false;				
			}

		} catch (Exception e) {
			status=false;
			e.printStackTrace();
		}
		
		return status;

	}
	
	
	
//	DELETE METHOD
	
	public boolean deleteUserByEmail(String email) {
		boolean status = false;
		try {

			String DELETE_SQL_QUERY = "DELETE FROM users WHERE email=?";

			int count = jdbcTemplate.update(DELETE_SQL_QUERY,email);

			if (count > 0) {
				status=true;
			}else {
				status=false;				
			}

		} catch (Exception e) {
			status=false;
			e.printStackTrace();
		}
		
		return status;

	}
	
	
	
//	Getting single user from the DB
	
	public User getUserByEmail(String email) {
		
		String SELECT_SQL_QUERY = "SELECT * FROM users where email=?";
//		jdbcTemplate.query(SELECT_SQL_QUERY, new UserRowMapper()); //this returns list but here we have only single user object to show then we use query and object not query and list.
		
		return jdbcTemplate.queryForObject(SELECT_SQL_QUERY, new UserRowMapper(),email);
		
	}
//	If we want that this static class have scope only to DAO then create here. But if we want to use somewhere else then create it in another package.
//	RowMapper is a predefined interface that is being used to get values from DB.
	public static final class UserRowMapper implements RowMapper<User> {

		@Override
		public User mapRow(ResultSet rs, int rowNum) throws SQLException {
			
			User user = new User();
			user.setName(rs.getString("name"));
			user.setEmail(rs.getString("email"));
			user.setGender(rs.getString("gender"));
			user.setCity(rs.getString("city"));
			
			return user;
		}
		
	}
	

}
